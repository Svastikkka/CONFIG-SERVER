@Library("shared-lib@master") _
import groovy.json.JsonOutput
import groovy.json.JsonSlurperClassic

pipeline {
    agent {
        label 'localhost'
    }
    stages {
        stage('Print Modified Files') {
            steps {
                script {
                    def excludeFile = { String filePath ->
                        // Add more conditions as needed to exclude specific files
                        filePath.endsWith('.md') || 
                        filePath.endsWith('.png') || 
                        filePath.endsWith('jenkinsfile') || 
                        filePath.endsWith('PATH.json') || 
                        filePath.endsWith('restart.yml') || 
                        filePath.endsWith('files.yml') || 
                        filePath.endsWith('cron.yml') || 
                        filePath.endsWith('main.yml') || 
                        filePath.endsWith('ping.yml') || 
                        filePath.endsWith('docker.yml') || 
                        filePath.endsWith('compose.yml') || 
                        filePath.endsWith('notification.groovy') || 
                        filePath.endsWith('inventory.sh') || 
                        filePath.endsWith('inventory.ini') || 
                        filePath.endsWith('.gitignore') || 
                        filePath.endsWith('Dockerfile') ||
                        filePath.endsWith('netplan.yml') ||
                        filePath.endsWith('ruff.toml') ||
                        filePath.endsWith('schema_validation.py') ||
                        filePath.endsWith('schema_validation.yml') ||
                        filePath.endsWith('_schema.json') ||
                        filePath.endsWith('environment.yml') ||
                        filePath.endsWith('dkms.yml') ||
                        filePath.endsWith('sysctl.yml')                        
                    }
 
                    def modifiedFiles = []
 
                    currentBuild.changeSets.each { changeLogSet ->
                        changeLogSet.items.each { entry ->
                            echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
                            entry.affectedFiles.each { file ->
                                if (!excludeFile(file.path) && "${file.editType.name}" != "delete") {
                                    echo "${file.editType.name} ${file.path}"
                                    modifiedFiles.add(file.path)
                                } else {
                                    echo "Part of excluded file"
                                }
                            }
                        }
                    }

                    // Print the list of modified files using a loop
                    for (int i = 0; i < modifiedFiles.size(); i++) {
                        echo "Complete PATH: ${modifiedFiles[i]}"
                        def parts = modifiedFiles[i].split('/')
 
                        def jsonFilePath = "${parts[0]}/PATH.json"
                        def keyToExtract = "${parts[2]}"
                        def jsonContent = new HashMap(readJSON(file: jsonFilePath))
                        if ("${parts[1]}" == "files") {
                            keyToExtract = "${parts[2]}"
                            fileInfo = new HashMap(jsonContent["files"][keyToExtract])
                        } else if ("${parts[1]}" == "docker-config") {
                            keyToExtract = "${parts[3]}"
                            fileInfo = new HashMap(jsonContent["docker-config"][keyToExtract])
                        } else if ("${parts[1]}" == "docker-compose") {
                            keyToExtract = "${parts[2]}"
                            fileInfo = new HashMap(jsonContent["docker-compose"][keyToExtract])
                        } else if ("${parts[1]}" == "schema-psql") {
                            keyToExtract = "${parts[2]}"
                            fileInfo = new HashMap(jsonContent["schema-psql"][keyToExtract])
                        } else if ("${parts[1]}" != "cron" && "${parts[1]}" != "docker-config" && "${parts[1]}" != "docker-compose")  {
                            keyToExtract = "${parts[2]}"
                            fileInfo = new HashMap(jsonContent[keyToExtract])
                        }

                        echo "Host: ${parts[0]}"
                        echo "Sub Folder: ${parts[1]}"
                        if ("${parts[1]}" != "cron" && "${parts[1]}" != "schema-psql"){
                            echo "Filename: ${parts[2]}"
                            echo "Service: ${fileInfo.service}"
                            echo "Path: ${fileInfo.path}"
                            echo "Enabled: ${fileInfo.enable}"
                            echo "Project: ${fileInfo.project}"
                        }
 
                        if ("${parts[0]}" == "tick" && "${parts[1]}" == "tickscript") {
                            def tickScriptContent = readFile("${modifiedFiles[i]}").trim().replaceAll('\n', '\\\n').replaceAll('\"', '\\\"')
 
                            def jsonPayload = [
                                id: fileInfo.service,
                                dbrps: [
                                    [
                                        db: "telegraf",
                                        rp: "autogen"
                                    ]
                                ],
                                type: "stream",
                                vars: [:],
                                script: tickScriptContent
                            ]
                            def jsonPayloadStr = groovy.json.JsonOutput.toJson(jsonPayload)
                            writeFile file: 'sample.json', text: jsonPayloadStr 
                            sh "cat sample.json"

                            def curlOutput = sh(script: "curl -s http://192.168.0.213:9092/kapacitor/v1/tasks/${fileInfo.service}", returnStdout: true)
                            def json = new JsonSlurperClassic().parseText(curlOutput)
                            def errorMessage = json.error?.trim()

                            def apiUrl2 = "http://192.168.0.213:9092/kapacitor/v1/tasks/${fileInfo.service}"

                            if (errorMessage =~ "no task exists") {
                            // Create tickscript not present
                            try {
                                sh script: """
                                    set +e
                                    curl -X POST -H Content-Type: application/json -d @sample.json http://192.168.0.213:9092/kapacitor/v1/tasks
                                    exitCode=\$?
                                    curl -X PATCH -H "Content-Type: application/json" -d '{"status": "enabled"}' ${apiUrl2}
                                    set -e
                                    if [ \$exitCode -ne 0]; then
                                        echo "Curl command failed with exit code: \$exitCode"
                                        exit 1
                                    fi
                                """, returnStdout: true
                            } catch (Exception e) {
                                notification("Failed to execute curl command for InfluxDB 2: ${e.getMessage()}")
                            }
                            } else {
                                // Update tickscript if present
                                try {
                                    sh script: """
                                        set +e
                                        curl -X PATCH -H "Content-Type: application/json" -d '{"status": "disabled"}' ${apiUrl2}
                                        curl -X PATCH -H "Content-Type: application/json" -d @sample.json ${apiUrl2}
                                        exitCode=\$?
                                        curl -X PATCH -H "Content-Type: application/json" -d '{"status": "enabled"}' ${apiUrl2}
                                        set -e
                                        if [ \$exitCode -ne 0]; then
                                            echo "Curl command failed with exit code: \$exitCode"
                                            exit 1
                                        fi
                                    """, returnStdout: true
                                } catch (Exception e) {
                                    notification("Failed to execute curl command for InfluxDB 2: ${e.getMessage()}")
                                }
                            }
                        } else if ("${parts[1]}" == "netplan") {
                            withCredentials([[$class: 'VaultUsernamePasswordCredentialBinding', credentialsId: "${parts[0]}", passwordVariable: 'password', usernameVariable: 'username']]) {
                                if ("${parts[0]}" != "localhost") {
                                    sh "ansible-playbook\
                                                        -i inventory.ini \
                                                        -u $username \
                                                        -e 'ansible_ssh_user=$username' \
                                                        -e 'ansible_ssh_pass=$password' \
                                                        -e ansible_sudo_pass=$password \
                                                        -e service=${fileInfo.service}\
                                                        -e src_path=${modifiedFiles[i]}\
                                                        -e dest_path=${fileInfo.path}\
                                                        -e enable=${fileInfo.enable}\
                                                        -e host=${parts[0]} netplan.yml"
                                } else {
                                    echo "Host is ${parts[0]} forbidden"
                                }
                            }
                        } else if ("${parts[1]}" == "sysctl") {
                            withCredentials([[$class: 'VaultUsernamePasswordCredentialBinding', credentialsId: "${parts[0]}", passwordVariable: 'password', usernameVariable: 'username']]) {
                                if ("${parts[0]}" != "localhost") {
                                    sh "ansible-playbook\
                                                        -i inventory.ini \
                                                        -u $username \
                                                        -e 'ansible_ssh_user=$username' \
                                                        -e 'ansible_ssh_pass=$password' \
                                                        -e ansible_sudo_pass=$password \
                                                        -e service=${fileInfo.service}\
                                                        -e src_path=${modifiedFiles[i]}\
                                                        -e dest_path=${fileInfo.path}\
                                                        -e enable=${fileInfo.enable}\
                                                        -e host=${parts[0]} sysctl.yml"
                                } else {
                                    echo "Host is ${parts[0]} forbidden"
                                }
                            }
                        } else if ("${parts[1]}" == "files"){
                            withCredentials([[$class: 'VaultUsernamePasswordCredentialBinding', credentialsId: "${parts[0]}", passwordVariable: 'password', usernameVariable: 'username']]) {

                                if ("${parts[0]}" != "localhost") {
                                    
                                    echo "user: ${fileInfo.user}"
                                    echo "group: ${fileInfo.group}"
                                    echo "mode: ${fileInfo.mode}"

                                    sh "ansible-playbook\
                                                        -i inventory.ini \
                                                        -u $username \
                                                        -e 'ansible_ssh_user=$username' \
                                                        -e 'ansible_ssh_pass=$password' \
                                                        -e ansible_sudo_pass=$password \
                                                        -e service=${fileInfo.service}\
                                                        -e src_path=${modifiedFiles[i]}\
                                                        -e dest_path=${fileInfo.path}\
                                                        -e restart_flag=${fileInfo.restart_flag}\
                                                        -e host=${parts[0]}\
                                                        -e user=${fileInfo.user}\
                                                        -e group=${fileInfo.group}\
                                                        -e mode=${fileInfo.mode} files.yml"

                                } else {
                                    echo "Host is ${parts[0]} forbidden"
                                }
                            }
                        } else if ("${parts[1]}" == "cron"){
                            withCredentials([[$class: 'VaultUsernamePasswordCredentialBinding', credentialsId: "${parts[0]}", passwordVariable: 'password', usernameVariable: 'username']]) {
                                echo "User: ${parts[2]}"
                                echo "File: ${parts[3]}"

                                if ("${parts[0]}" != "localhost") {
                                    
                                    echo "User: ${parts[2]}"
                                    echo "File: ${parts[3]}"
                                    sh "ansible-playbook\
                                                        -i inventory.ini \
                                                        -u $username \
                                                        -e 'ansible_ssh_user=$username' \
                                                        -e 'ansible_ssh_pass=$password' \
                                                        -e ansible_sudo_pass=$password \
                                                        -e src_path=${modifiedFiles[i]}\
                                                        -e dest_path=/tmp/${parts[2]}_cron.txt\
                                                        -e user=${parts[2]}\
                                                        -e host=${parts[0]} cron.yml"


                                } else {
                                    echo "Host is ${parts[0]} forbidden"
                                }
                            }
                        } else if ("${parts[1]}" == "docker-config") {
                            withCredentials([[$class: 'VaultUsernamePasswordCredentialBinding', credentialsId: "${parts[0]}", passwordVariable: 'password', usernameVariable: 'username']]) {

                                if ("${parts[0]}" != "localhost") {
                                    def services = fileInfo.service.split(",")
                                    services.each { service ->
                                        sh "echo $service"
                                        sh "ansible-playbook\
                                                            -i inventory.ini \
                                                            -u $username \
                                                            -e 'ansible_ssh_user=$username' \
                                                            -e 'ansible_ssh_pass=$password' \
                                                            -e ansible_sudo_pass=$password \
                                                            -e service=${service}\
                                                            -e src_path=${modifiedFiles[i]}\
                                                            -e dest_path=${fileInfo.path}\
                                                            -e enable=${fileInfo.enable}\
                                                            -e jobName=${env.JOB_NAME}\
                                                            -e buildNumber=${env.BUILD_NUMBER}\
                                                            -e host=${parts[0]} docker.yml"
                                    }
                                } else {
                                    echo "Host is ${parts[0]} forbidden"
                                }
                            }
                        } else if ("${parts[1]}" == "docker-compose") {
                            withCredentials([[$class: 'VaultUsernamePasswordCredentialBinding', credentialsId: "${parts[0]}", passwordVariable: 'password', usernameVariable: 'username']]) {

                                if ("${parts[0]}" != "localhost") {
                                    sh "ansible-playbook\
                                                        -i inventory.ini \
                                                        -u $username \
                                                        -e 'ansible_ssh_user=$username' \
                                                        -e 'ansible_ssh_pass=$password' \
                                                        -e ansible_sudo_pass=$password \
                                                        -e service=${fileInfo.service}\
                                                        -e src_path=${modifiedFiles[i]}\
                                                        -e dest_path=${fileInfo.path}\
                                                        -e enable=${fileInfo.enable}\
                                                        -e jobName=${env.JOB_NAME}\
                                                        -e buildNumber=${env.BUILD_NUMBER}\
                                                        -e project=${fileInfo.project}\
                                                        -e host=${parts[0]} compose.yml"
                                } else {
                                    echo "Host is ${parts[0]} forbidden"
                                }
                            }
                        } else if ("${parts[1]}" == "schema-psql") {
                            withCredentials([[$class: 'VaultUsernamePasswordCredentialBinding', credentialsId: "psql_${fileInfo.port}_${parts[0]}", passwordVariable: 'password', usernameVariable: 'username']]) {

                                if ("${parts[0]}" != "localhost") {
                                    echo "This is schema psql"
                                    echo "Port: ${fileInfo.port}"
                                    echo "Database: ${fileInfo.restore_options.dbname}"
                                    echo "Enable: ${fileInfo.restore_options.enable}"
                                    echo "Restore Options: ${fileInfo.restore_options}"
                                    sh """
                                        export PGPASSWORD='$password'
                                        psql -h ${parts[0]} -p ${fileInfo.port}  -d ${fileInfo.restore_options.dbname} -U $username -f ${modifiedFiles[i]}
                                    """
                                } else {
                                    echo "Host is ${parts[0]} forbidden"
                                }
                            }
                        } else if ("${parts[1]}" != "files" && "${parts[1]}" != "docker-config"  && "${parts[0]}" != "tick") {
                            withCredentials([[$class: 'VaultUsernamePasswordCredentialBinding', credentialsId: "${parts[0]}", passwordVariable: 'password', usernameVariable: 'username']]) {
                                if ("${parts[0]}" != "localhost") {
                                    if ("${fileInfo.path}".endsWith('.service')) {
                                        sh "ansible-playbook\
                                                            -i inventory.ini \
                                                            -u $username \
                                                            -e 'ansible_ssh_user=$username' \
                                                            -e 'ansible_ssh_pass=$password' \
                                                            -e ansible_sudo_pass=$password \
                                                            -e service=${fileInfo.service}\
                                                            -e src_path=${modifiedFiles[i]}\
                                                            -e dest_path=${fileInfo.path}\
                                                            -e enable=${fileInfo.enable}\
                                                            -e daemon_reload=true\
                                                            -e host=${parts[0]} restart.yml"
                                    }
                                    sh "ansible-playbook\
                                                        -i inventory.ini \
                                                        -u $username \
                                                        -e 'ansible_ssh_user=$username' \
                                                        -e 'ansible_ssh_pass=$password' \
                                                        -e ansible_sudo_pass=$password \
                                                        -e service=${fileInfo.service}\
                                                        -e src_path=${modifiedFiles[i]}\
                                                        -e dest_path=${fileInfo.path}\
                                                        -e enable=${fileInfo.enable}\
                                                        -e daemon_reload=false\
                                                        -e host=${parts[0]} restart.yml"
                                } else {
                                    echo "Host is ${parts[0]} forbidden"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                notification("Pipeline job has successfully build")
            }
        }
        failure {
            script {
                notification("Pipeline job has failure build")
            }
        }
    }
}