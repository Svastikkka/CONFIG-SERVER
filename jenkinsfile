import groovy.json.JsonOutput
import groovy.json.JsonSlurperClassic
def modifiedFiles = []
def failedFiles = []
def extractFileInfo(parts,jsonContent) {
    if ("${parts[1]}" == "files") {
        keyToExtract = "${parts[2]}"
        fileInfo = new HashMap(jsonContent["files"][keyToExtract])
    } else if ("${parts[1]}" == "docker-config") {
        keyToExtract = "${parts[3]}"
        fileInfo = new HashMap(jsonContent["docker-config"][keyToExtract])
    } else if ("${parts[1]}" == "docker-compose") {
        keyToExtract = "${parts[2]}"
        fileInfo = new HashMap(jsonContent["docker-compose"][keyToExtract])
    } else if ("${parts[1]}" == "schema-psql") {
        keyToExtract = "${parts[2]}"
        fileInfo = new HashMap(jsonContent["schema-psql"][keyToExtract])
    } else if ("${parts[1]}" == "schema-mysql") {
        keyToExtract = "${parts[2]}"
        fileInfo = new HashMap(jsonContent["schema-mysql"][keyToExtract])
    } else if ("${parts[1]}" != "cron" && "${parts[1]}" != "docker-config" && "${parts[1]}" != "docker-compose")  {
        keyToExtract = "${parts[2]}"
        fileInfo = new HashMap(jsonContent[keyToExtract])
    }
    return fileInfo 
}
pipeline {
    agent {
        label 'localhost'
    }
    stages {
        stage('Modified Files') {
            steps {
                script {
                    def excludeFile = { String filePath ->
                        // Add more conditions as needed to exclude specific files
                        filePath.endsWith('.md') || 
                        filePath.endsWith('.png') || 
                        filePath.endsWith('jenkinsfile') || 
                        filePath.endsWith('PATH.json') || 
                        filePath.endsWith('restart.yml') || 
                        filePath.endsWith('files.yml') || 
                        filePath.endsWith('cron.yml') || 
                        filePath.endsWith('main.yml') || 
                        filePath.endsWith('ping.yml') || 
                        filePath.endsWith('docker.yml') || 
                        filePath.endsWith('compose.yml') || 
                        filePath.endsWith('notification.groovy') || 
                        filePath.endsWith('inventory.sh') || 
                        filePath.endsWith('inventory.ini') || 
                        filePath.endsWith('.gitignore') || 
                        filePath.endsWith('Dockerfile') ||
                        filePath.endsWith('netplan.yml') ||
                        filePath.endsWith('ruff.toml') ||
                        filePath.endsWith('schema_validation.py') ||
                        filePath.endsWith('schema_validation.yml') ||
                        filePath.endsWith('_schema.json') ||
                        filePath.endsWith('environment.yml') ||
                        filePath.endsWith('dkms.yml') ||
                        filePath.endsWith('sysctl.yml')                        
                    }
                    currentBuild.changeSets.each { changeLogSet ->
                        changeLogSet.items.each { entry ->
                            echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
                            entry.affectedFiles.each { file ->
                                if (!excludeFile(file.path) && "${file.editType.name}" != "delete") {
                                    echo "${file.editType.name} ${file.path}"
                                    modifiedFiles.add(file.path)
                                } else {
                                    echo "Part of excluded file"
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("DryRun"){
            steps {
                script {
                    echo "Dry Run Stage"
                    def dryRunFile = { String filePath ->
                        // Add more conditions as needed to dry run specific files
                        filePath.endsWith('nginx.conf')                      
                    }
                    for (int i = 0; i < modifiedFiles.size(); i++) {
                    
                        if (dryRunFile(modifiedFiles[i])){
                            echo "Complete PATH: ${modifiedFiles[i]}"
                            def parts = modifiedFiles[i].split('/')
                            def jsonFilePath = "${parts[0]}/PATH.json"
                            def keyToExtract = "${parts[2]}"
                            def jsonContent = new HashMap(readJSON(file: jsonFilePath))
                            def fileInfo = extractFileInfo(parts,jsonContent)

                            echo "Host: ${parts[0]}"
                            echo "Sub Folder: ${parts[1]}"
                            echo "Filename: ${parts[2]}"
                            echo "Service: ${fileInfo.service}"
                            echo "Path: ${fileInfo.path}"
                            echo "Enabled: ${fileInfo.enable}"
                            try {
                                withCredentials([[$class: 'VaultUsernamePasswordCredentialBinding', credentialsId: "${parts[0]}", passwordVariable: 'password', usernameVariable: 'username']]) {
                                    if ("${parts[0]}" != "localhost") {
                                        sh "ansible-playbook\
                                                            -i inventory.ini \
                                                            -u $username \
                                                            -e 'ansible_ssh_user=$username' \
                                                            -e 'ansible_ssh_pass=$password' \
                                                            -e ansible_sudo_pass=$password \
                                                            -e service=${fileInfo.service}\
                                                            -e src_path=${modifiedFiles[i]}\
                                                            -e dest_path=${fileInfo.path}\
                                                            -e enable=${fileInfo.enable}\
                                                            -e daemon_reload=false\
                                                            -e host=${parts[0]} ./playbooks/test/test_nginx.yml"
                                    } else {
                                        echo "Host is ${parts[0]} forbidden"
                                    }
                                }
                            }  catch (Exception e) {
                                failedFiles.add(modifiedFiles[i])
                                echo "Nginx Config  Dry Run Fail"
                                echo e
                            }
                        }
                    }
                }
            }
        }
        stage("Apply Modified Files"){
            steps {
                script {
                    modifiedFiles.removeAll(failedFiles)
                    // Print the list of modified files using a loop
                    for (int i = 0; i < modifiedFiles.size(); i++) {
                        echo "Complete PATH: ${modifiedFiles[i]}"
                        def parts = modifiedFiles[i].split('/')
 
                        def jsonFilePath = "${parts[0]}/PATH.json"
                        def keyToExtract = "${parts[2]}"
                        def jsonContent = new HashMap(readJSON(file: jsonFilePath))
                        def fileInfo = extractFileInfo(parts,jsonContent)

                        echo "Host: ${parts[0]}"
                        echo "Sub Folder: ${parts[1]}"
                        if ("${parts[1]}" != "cron" && "${parts[1]}" != "schema-psql"){
                            echo "Filename: ${parts[2]}"
                            echo "Service: ${fileInfo.service}"
                            echo "Path: ${fileInfo.path}"
                            echo "Enabled: ${fileInfo.enable}"
                            echo "Project: ${fileInfo.project}"
                        }
                    }
                }
            }
        }
    }
}